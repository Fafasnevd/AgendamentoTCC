{"version":3,"sources":["pages/admin/procedures/add/add-procedure.js"],"names":["AddProcedure","useState","professionalsArray","setProfessionalsArray","useEffect","fetchProfessionals","addProcedure","useDatabase","name","time","procedure","setProcedure","professionalsPrices","setProfessionalsPrices","professionalsObject","professionals","selectedProfessional","setSelectedProfessional","inputPriceRef","useRef","open","success","message","snackBar","setSnackbar","hasError","errors","undefined","Object","keys","length","handleProceduresChanges","e","target","value","state","console","log","map","key","id","handleSave","a","proc","price","res","Grid","container","spacing","item","xs","Alert","variant","severity","onChange","label","sm","Divider","justify","lg","md","List","professionalID","currentProfessional","ListItem","ListItemAvatar","Avatar","alt","toUpperCase","src","photo","ListItemText","primary","secondary","toMoney","ListItemSecondaryAction","IconButton","onClick","remainder","Delete","direction","alignItems","FormControl","style","width","Select","labelId","displayEmpty","fullWidth","MenuItem","disabled","professional","required","inputRef","inputProps","type","min","inputValue","current","prices","to","color","Snackbar","onClose","autoHideDuration"],"mappings":"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","file":"static/js/30.5eba06fb.chunk.js","sourcesContent":["import {\r\n  Divider,\r\n  FormControl,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Avatar,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  MenuItem,\r\n  Select,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Snackbar\r\n} from '@material-ui/core'\r\nimport { Delete as DeleteIcon } from '@material-ui/icons'\r\nimport { Alert } from '@material-ui/lab'\r\nimport { useDatabase } from 'hooks'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { Button, Content, H5, PaperContainer, Spacer, TextField } from 'ui'\r\nimport { toMoney } from 'utils'\r\n\r\nfunction AddProcedure () {\r\n  const [professionalsArray, setProfessionalsArray] = useState(() => [])\r\n  \r\n  useEffect(() => {\r\n    fetchProfessionals()\r\n    // setProfessionalsArray(professionalsArray)\r\n  }, [])\r\n\r\n  const { addProcedure } = useDatabase()\r\n\r\n  const [procedure, setProcedure] = useState(() => ({\r\n    name: '',\r\n    time: ''\r\n  }))\r\n  const [professionalsPrices, setProfessionalsPrices] = useState(() => ({}))\r\n  const { professionals: professionalsObject, fetchProfessionals } = useDatabase()\r\n  const [selectedProfessional, setSelectedProfessional] = useState(() => \"\")\r\n  const inputPriceRef = useRef()\r\n\r\n  const [snackBar, setSnackbar] = useState(() => ({\r\n    open: false,\r\n    success: false,\r\n    message: ''\r\n  }))\r\n\r\n\r\n \r\n  const hasError = () => {\r\n    let errors = 0\r\n    if (professionalsPrices === undefined || Object.keys(professionalsPrices).length < 1) {\r\n      errors++\r\n    }\r\n    if (procedure.name === \"\" || procedure.time === \"\") {\r\n      errors++\r\n    }\r\n\r\n    return errors > 0\r\n  }\r\n\r\n  const clearFields = () => {\r\n    setProcedure({\r\n      name: '',\r\n      time: ''\r\n    })\r\n    setProfessionalsPrices([])\r\n\r\n  }\r\n\r\n  const handleClick = () => {\r\n    const inputValue = inputPriceRef.current.value\r\n    if (selectedProfessional) {\r\n      setProfessionalsPrices((prices) => ({\r\n        ...prices,\r\n        [selectedProfessional]: inputValue\r\n      }))\r\n      inputPriceRef.current.value = null\r\n    }\r\n\r\n  }\r\n\r\n  const handleDelete = (professionalID) => (e) => {\r\n    const { [professionalID]: removed, ...remainder } = professionalsPrices\r\n    setProfessionalsPrices(remainder)\r\n  }\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({\r\n      open: false,\r\n      message: '',\r\n    })\r\n  };\r\n\r\n\r\n  const handleProfessionalChanges = (e) => {\r\n    setSelectedProfessional(e.target.value)\r\n  }\r\n  const handleProceduresChanges = (e) => {\r\n    const { name, value } = e.target\r\n    setProcedure((state) => ({\r\n      ...state,\r\n      [name]: value\r\n    }))\r\n    console.log(procedure)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (professionalsObject) {\r\n      setProfessionalsArray([\r\n        ...Object.keys(professionalsObject)\r\n          .map((key) => ({\r\n            id: key,\r\n            ...professionalsObject[key]\r\n          }))\r\n      ])\r\n    }\r\n  }, [professionalsObject])\r\n\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"erro? \", hasError());\r\n    if (!hasError()) {\r\n      const proc = {\r\n        ...procedure,\r\n        price: professionalsPrices\r\n      }\r\n      const res = await addProcedure(proc)\r\n      setSnackbar({\r\n        open: true,\r\n        success: res.success,\r\n        message: res.message\r\n      })\r\n    }\r\n    clearFields()\r\n  }\r\n\r\n  return (\r\n    <Content>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          <PaperContainer>\r\n            {hasError() && <Alert variant='filled' severity='error' >Preencha todos os campos e adicione valores</Alert>}\r\n            <H5>Adicionar procedimento</H5>\r\n            <Grid container spacing={1}>\r\n              <TextField value={procedure.name} name='name' onChange={handleProceduresChanges} variant='outlined' label='Procedimento' sm={9} xs={12} />\r\n              <TextField value={procedure.time} name='time' onChange={handleProceduresChanges} variant='outlined' label='Tempo' sm={3} xs={4} />\r\n            </Grid>\r\n            <Spacer />\r\n            <H5>Valores</H5>\r\n            <Divider />\r\n            <Spacer />\r\n            <Grid item xs={12}>\r\n              <Grid container justify='center'>\r\n                <Grid item lg={4} md={4} sm={10} xs={12}>\r\n\r\n                  <List>\r\n                    {!!professionalsPrices && Object.keys(professionalsPrices).map((key) => {\r\n                      const currentProfessional = professionalsObject[key]\r\n                      const price = professionalsPrices[key]\r\n                      return (\r\n                        <ListItem key={key}>\r\n                          <ListItemAvatar>\r\n                            <Avatar alt={currentProfessional.name.toUpperCase()} src={currentProfessional.photo} />\r\n                          </ListItemAvatar>\r\n                          <ListItemText\r\n                            primary={currentProfessional.name}\r\n                            secondary={toMoney(price)} />\r\n                          <ListItemSecondaryAction>\r\n                            <IconButton\r\n                              onClick={handleDelete(key)}>\r\n                              <DeleteIcon />\r\n                            </IconButton>\r\n                          </ListItemSecondaryAction>\r\n                        </ListItem>)\r\n                    })}\r\n                  </List>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            {!!professionalsArray && (\r\n              <Grid item >\r\n                <Grid container spacing={2} direction=\"row\" justify='center' alignItems='center'>\r\n                  <Grid item sm={4} xs={10}>\r\n                    <FormControl variant='outlined' style={{ width: '100%' }}>\r\n                      <Select\r\n                        labelId=\"simple-select-label\"\r\n                        value={selectedProfessional}\r\n                        displayEmpty\r\n                        fullWidth\r\n                        onChange={handleProfessionalChanges}>\r\n                        <MenuItem value=\"\" disabled>\r\n                          <em>Selecione um profissional</em>\r\n                        </MenuItem>\r\n                        {professionalsArray.map((professional) => (\r\n                          <MenuItem key={professional.id} value={professional.id}>{professional.name}</MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item sm={3} xs={7}>\r\n                    <TextField\r\n                      required\r\n                      inputRef={inputPriceRef}\r\n                      inputProps={{ type: 'number', min: 0 }}\r\n                      label='valor'\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <Button\r\n                      onClick={handleClick}\r\n                      to=\"#\"\r\n                      variant='contained'\r\n                      color='secondary'>Definir</Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n            <Spacer />\r\n            <Divider />\r\n            <Spacer />\r\n            <Grid container item justify='center'>\r\n              <Button\r\n                onClick={handleSave}\r\n                to=\"#\"\r\n                variant='contained'\r\n                color='primary'>Salvar</Button>\r\n            </Grid>\r\n          </PaperContainer>\r\n          <Snackbar\r\n            open={snackBar.open}\r\n            onClose={handleCloseSnackbar}\r\n            autoHideDuration={3000}\r\n            key={snackBar.message}>\r\n            <Alert variant='filled' severity={snackBar.success ? 'success' : 'error'}>\r\n              {snackBar.message}\r\n            </Alert>\r\n          </Snackbar>\r\n        </Grid>\r\n      </Grid>\r\n    </Content>\r\n  )\r\n}\r\n\r\nexport default AddProcedure\r\n"],"sourceRoot":""}