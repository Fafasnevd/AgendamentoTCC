{"version":3,"sources":["../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js","../node_modules/@material-ui/core/esm/ListItemText/ListItemText.js","utils/accent-remove.js","pages/choose-procedure/choose-procedure.js"],"names":["ListItemSecondaryAction","React","props","ref","classes","className","other","_objectWithoutProperties","_extends","clsx","root","muiName","withStyles","position","right","top","transform","name","ListItemText","children","_props$disableTypogra","disableTypography","_props$inset","inset","primaryProp","primary","primaryTypographyProps","secondaryProp","secondary","secondaryTypographyProps","dense","ListContext","type","Typography","variant","component","display","color","multiline","flex","minWidth","marginTop","marginBottom","paddingLeft","accentRemove","text","toLowerCase","replace","RegExp","Button","styled","MaterialButton","attrs","Link","ProcedureContainer","main","theme","spacing","Grid","MaterialGrid","container","xs","sm","List","MaterialList","TextField","MaterialTextField","ChooseProcedure","useDatabase","fetchedProcedures","procedures","fetchProcedures","useState","setProcedures","useEffect","console","log","justify","style","padding","InputLabel","label","onChange","e","procedureName","target","value","regex","result","filter","procedure","search","map","ListItem","alignItems","time","to","pathname","CHOOSE_PROFESSIONAL","state","size","id","Divider"],"mappings":"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","file":"static/js/24.438c186a.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    position: 'absolute',\n    right: 16,\n    top: '50%',\n    transform: 'translateY(-50%)'\n  }\n};\n/**\n * Must be used as the last child of ListItem to function properly.\n */\n\nvar ListItemSecondaryAction = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemSecondaryAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nListItemSecondaryAction.muiName = 'ListItemSecondaryAction';\nexport default withStyles(styles, {\n  name: 'MuiListItemSecondaryAction'\n})(ListItemSecondaryAction);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Alias for the `primary` prop.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * If `true`, the children will be indented.\n   * This should be used if there is no left avatar or left icon.\n   */\n  inset: PropTypes.bool,\n\n  /**\n   * The main content element.\n   */\n  primary: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  primaryTypographyProps: PropTypes.object,\n\n  /**\n   * The secondary content element.\n   */\n  secondary: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  secondaryTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);","export default function accentRemove (text) {\r\n  text = text.toLowerCase();\r\n  text = text.replace(new RegExp('[ÁÀÂÃ]', 'gi'), 'a');\r\n  text = text.replace(new RegExp('[ÉÈÊ]', 'gi'), 'e');\r\n  text = text.replace(new RegExp('[ÍÌÎ]', 'gi'), 'i');\r\n  text = text.replace(new RegExp('[ÓÒÔÕ]', 'gi'), 'o');\r\n  text = text.replace(new RegExp('[ÚÙÛ]', 'gi'), 'u');\r\n  text = text.replace(new RegExp('[Ç]', 'gi'), 'c');\r\n  return text;\r\n}","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  List as MaterialList,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Divider,\r\n  Button as MaterialButton,\r\n  Grid as MaterialGrid,\r\n  TextField as MaterialTextField,\r\n  InputLabel\r\n} from '@material-ui/core'\r\n\r\nimport mockProcedures from 'fake-data/procedures'\r\nimport { Link } from 'react-router-dom'\r\nimport { CHOOSE_PROFESSIONAL } from 'routes'\r\nimport accentRemove from 'utils/accent-remove'\r\nimport { useDatabase } from 'hooks'\r\n\r\nconst ChooseProcedure = () => {\r\n  const { procedures: fetchedProcedures, fetchProcedures } = useDatabase()\r\n  const [procedures, setProcedures] = useState(() => [])\r\n\r\n  useEffect(()=>{\r\n    fetchProcedures()\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    setProcedures(fetchedProcedures)\r\n    console.log(\"procedimentos\", fetchedProcedures)\r\n  }, [fetchedProcedures])\r\n\r\n  const handleSearch = (e) => {\r\n    let procedureName = accentRemove(e.target.value)\r\n    procedureName = procedureName.replace(/[^\\w\\s]+/g, '') // remove symbols\r\n    const regex = new RegExp(procedureName, 'ig')\r\n    const result = fetchedProcedures.filter((procedure) => {\r\n      const match = accentRemove(procedure.name).search(regex) > -1\r\n      return match\r\n    })\r\n    setProcedures(result)\r\n  }\r\n\r\n  return (\r\n    <ProcedureContainer>\r\n      <Grid container justify='center' style={{padding: 10}}>\r\n        <InputLabel>Escolha um serviço</InputLabel>\r\n        <TextField\r\n          label=\"Buscar\"\r\n          variant='outlined'\r\n          onChange={handleSearch}\r\n        />\r\n      </Grid>\r\n      <Grid>\r\n        <List component='nav'>\r\n          {procedures.map((procedure) => (\r\n            <>\r\n              <ListItem\r\n                alignItems=\"center\"\r\n                key={procedure.id}>\r\n                <ListItemText\r\n                  primary={procedure.name}\r\n                  secondary={`${procedure.time}`} />\r\n                <ListItemSecondaryAction>\r\n                  <Button\r\n                    to={{\r\n                      pathname: CHOOSE_PROFESSIONAL,\r\n                      state: { procedure }\r\n                    }}\r\n                    variant='outlined'\r\n                    color='primary'\r\n                    size='small'>\r\n                    Reservar\r\n                  </Button>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n              <Divider />\r\n            </>\r\n          ))}\r\n        </List>\r\n      </Grid>\r\n    </ProcedureContainer>\r\n  )\r\n}\r\n\r\nconst Button = styled(MaterialButton).attrs({\r\n  component: Link\r\n})`\r\n`\r\n\r\nconst ProcedureContainer = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: ${({ theme }) => theme.spacing(3)}px;\r\n  margin-bottom: ${({ theme }) => theme.spacing(8)}px;\r\n`\r\n\r\nconst Grid = styled(MaterialGrid).attrs({\r\n  container: true,\r\n  xs: 12,\r\n  sm: 8\r\n})`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`\r\n\r\nconst List = styled(MaterialList)`\r\n  width: 100%;\r\n`\r\nconst TextField = styled(MaterialTextField)`\r\n  margin-bottom: ${({ theme }) => theme.spacing(3)}px;\r\n  margin-top: ${({ theme }) => theme.spacing(1)}px;\r\n`\r\n\r\n\r\nexport default ChooseProcedure"],"sourceRoot":""}