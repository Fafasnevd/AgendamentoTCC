{"version":3,"sources":["utils/to-money.js","utils/percentage.js","services/mercadopago-api.js","pages/checkout/mercado-livre-form/mercado-livre-form.js","strings/mercadopago-response.js","pages/checkout/checkout.js"],"names":["toMoney","value","Intl","NumberFormat","style","currency","format","getPercentage","percentual","mpApi","axios","create","baseURL","MercadoLivreCardForm","schedules","price","userInfo","useState","cardNumber","formData","setFormData","setPaymentStatusDetails","useShoppingCart","submitSchedule","useDatabase","useEffect","window","Mercadopago","clearSession","setPublishableKey","getIdentificationTypes","document","getElementById","getDescription","backgroundImage","classList","add","options","length","cleanCardInfo","bin","substring","getPaymentMethod","setPaymentMethod","guessPaymentMethod","console","log","withBrand","decription","forEach","schedule","index","name","procedure","date","Date","selectedDate","toLocaleDateString","status","response","paymentMethod","id","thumbnail","additional_info_needed","includes","paymentMethodId","getIssuers","setIssuers","getInstallments","alert","message","issuerSelect","issuer","opt","createElement","text","appendChild","remove","amount","issuerId","payment_method_id","issuer_id","parseInt","undefined","setInstallments","payer_costs","payerCost","recommended_message","installments","pay","a","email","transactionAmount","token","description","paymentData","filteredSchedules","map","time","professional","photo","parseFloat","scheduleDate","scheduleTime","selectedTime","data","post","res","hasOwnProperty","user","userId","uid","userName","displayName","userPhoto","photoURL","userEmail","paymentInfo","setCardTokenAndPay","JSON","stringify","class","onSubmit","e","preventDefault","event","form","createToken","getCardToken","for","required","defaultValue","type","Select","native","hidden","inputProps","variant","placeholder","onselectStart","onPaste","onCopy","onCut","onDrag","onDrop","autoComplete","onChange","target","state","approved","accredited","in_process","pending_contingency","pending_review_manual","rejected","cc_rejected_bad_filled_card_number","cc_rejected_bad_filled_date","cc_rejected_bad_filled_other","cc_rejected_bad_filled_security_code","cc_rejected_blacklist","cc_rejected_call_for_authorize","cc_rejected_card_disabled","cc_rejected_card_error","cc_rejected_duplicated_payment","cc_rejected_high_risk","cc_rejected_insufficient_amount","cc_rejected_invalid_installments","cc_rejected_max_attempts","cc_rejected_other_reason","4049","Card","styled","MaterialCard","theme","palette","primary","light","spacing","CardContent","MaterialCardContent","CardText","Typography","Checkout","location","history","removeScheduleFromShoppingCart","resetShoppingCart","paymentDetails","useAuth","total","payment","currentPrice","percentage","toFixed","getPrice","pathname","title","lastIndexOf","mpResponseStrings","status_detail","push","RESERVATIONS","cause","code","removeSchedule","Grid","container","justify","item","sm","lg","md","xs","className","weekday","noWrap","getDate","month","CardActions","IconButton","onClick","DeleteSharp","to","SCHEDULE","color","align","FormControl","RadioGroup","FormControlLabel","control","Radio","label"],"mappings":"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","file":"static/js/20.69a8cf8e.chunk.js","sourcesContent":["function toMoney (value) {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value)\r\n  // return Number(value).toLocaleString('pt-br', {\r\n  //   style: 'currency',\r\n  //   currency: 'BRL'\r\n  // })\r\n}\r\n\r\nexport default toMoney\r\n"," function getPercentage (value, percentual = 30){\r\n  return percentual / 100 * value\r\n}\r\n\r\nexport default getPercentage","import axios from 'axios'\r\n\r\nconst mpApi = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n})\r\n\r\nexport const payNow =  (data) => {\r\n return mpApi.post('/process_payment', data)\r\n}\r\n","import { Select } from \"@material-ui/core\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { TextField } from \"ui\"\r\nimport mpInsertionErros from \"strings/mercadopago-insertion-errors\"\r\nimport \"./style.css\"\r\nimport { useDatabase, useShoppingCart } from \"hooks\"\r\nimport * as mpApi from \"services/mercadopago-api\"\r\n\r\nconst MercadoLivreCardForm = ({ schedules, price, userInfo }) => {\r\n\r\n  const [formData, setFormData] = useState({\r\n    cardNumber: \"6062826786276634\",\r\n  })\r\n\r\n  const { setPaymentStatusDetails } = useShoppingCart()\r\n  const { submitSchedule } = useDatabase()\r\n\r\n  useEffect(() => {\r\n    //para poder fazer outra compra com o mesmo cartão\r\n    window.Mercadopago.clearSession()\r\n\r\n    window.Mercadopago.setPublishableKey(\r\n      \"TEST-72a91e7b-462c-4ed6-be2c-5485b30eeb3b\"\r\n    )\r\n\r\n    window.Mercadopago.getIdentificationTypes()\r\n\r\n    document.getElementById(\"description\").value = getDescription(true)\r\n\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    guessPaymentMethod(formData.cardNumber)\r\n    console.log(\"STATE\", formData)\r\n  }, [formData.cardNumber])\r\n\r\n  const getDescription = (withBrand = false) => {\r\n    let decription = withBrand ? \"Raisse Queiroz & Hercules Queiroz - \" : \"\"\r\n    schedules.forEach((schedule, index) => {\r\n      let name = schedule.procedure.name\r\n      let date = new Date(schedule.selectedDate).toLocaleDateString()\r\n      decription +=\r\n        schedules.length != index + 1\r\n          ? `${name} (${date}) , `\r\n          : `${name} (${date})`\r\n    })\r\n\r\n    return decription\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let { name, value } = e.target\r\n    setFormData((state) => ({\r\n      ...state,\r\n      [name]: value,\r\n    }))\r\n  }\r\n\r\n  function guessPaymentMethod(cardNumber) {\r\n    cleanCardInfo()\r\n\r\n    if (cardNumber.length >= 6) {\r\n      let bin = cardNumber.substring(0, 6)\r\n      window.Mercadopago.getPaymentMethod(\r\n        {\r\n          bin: bin,\r\n        },\r\n        setPaymentMethod\r\n      )\r\n    }\r\n  }\r\n\r\n  function setPaymentMethod(status, response) {\r\n    if (status == 200) {\r\n      let paymentMethod = response[0]\r\n\r\n      document.getElementById(\"paymentMethodId\").value = paymentMethod.id\r\n      document.getElementById(\r\n        \"cardNumber\"\r\n      ).style.backgroundImage = `url(${paymentMethod.thumbnail})`\r\n\r\n      if (paymentMethod.additional_info_needed.includes(\"issuer_id\")) {\r\n        getIssuers(paymentMethod.id)\r\n      } else {\r\n        document.getElementById(\"issuerInput\").classList.add(\"hidden\")\r\n\r\n        getInstallments(paymentMethod.id, price)\r\n      }\r\n    } else {\r\n      alert(`payment method info error: ${response.message}`)\r\n      console.log(`payment method info `, response)\r\n    }\r\n  }\r\n\r\n  function getIssuers(paymentMethodId) {\r\n    window.Mercadopago.getIssuers(paymentMethodId, setIssuers)\r\n  }\r\n\r\n  function setIssuers(status, response) {\r\n    if (status == 200) {\r\n      let issuerSelect = document.getElementById(\"issuer\")\r\n\r\n      response.forEach((issuer) => {\r\n        let opt = document.createElement(\"option\")\r\n        opt.text = issuer.name\r\n        opt.value = issuer.id\r\n        issuerSelect.appendChild(opt)\r\n      })\r\n\r\n      if (issuerSelect.options.length <= 1) {\r\n        document.getElementById(\"issuerInput\").classList.add(\"hidden\")\r\n      } else {\r\n        document.getElementById(\"issuerInput\").classList.remove(\"hidden\")\r\n      }\r\n\r\n      getInstallments(\r\n        document.getElementById(\"paymentMethodId\").value,\r\n        price,\r\n        issuerSelect.value\r\n      )\r\n    } else {\r\n      alert(`issuers method info error: ${response}`)\r\n    }\r\n  }\r\n  // updateInstallmentsForIssuer\r\n  const handleIssuerChange = (e) => {\r\n    window.Mercadopago.getInstallments(\r\n      {\r\n        payment_method_id: document.getElementById(\"paymentMethodId\").value,\r\n        amount: price,\r\n        issuer_id: parseInt(document.getElementById(\"issuer\").value),\r\n      },\r\n      setInstallments\r\n    )\r\n  }\r\n\r\n  function getInstallments(paymentMethodId, amount, issuerId) {\r\n    window.Mercadopago.getInstallments(\r\n      {\r\n        payment_method_id: paymentMethodId,\r\n        amount: price,\r\n        issuer_id: issuerId ? parseInt(issuerId) : undefined,\r\n      },\r\n      setInstallments\r\n    )\r\n  }\r\n\r\n  function setInstallments(status, response) {\r\n    if (status == 200) {\r\n      document.getElementById(\"installments\").options.length = 0\r\n      response[0].payer_costs.forEach((payerCost) => {\r\n        let opt = document.createElement(\"option\")\r\n        opt.text = payerCost.recommended_message\r\n        opt.value = payerCost.installments\r\n        document.getElementById(\"installments\").appendChild(opt)\r\n      })\r\n    } else {\r\n      alert(`installments method info error: ${response}`)\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    getCardToken(e)\r\n  }\r\n\r\n  const pay = async () => {\r\n    const paymentMethodId = document.getElementById(\"paymentMethodId\").value\r\n    const installments = document.getElementById(\"installments\").value\r\n    const email = document.getElementById(\"email\").value\r\n    const transactionAmount = document.getElementById(\"amount\").value\r\n    const token = document.getElementById(\"token\").value\r\n    const description = getDescription()\r\n    const paymentData = {\r\n      email,\r\n      description,\r\n      installments,\r\n      paymentMethodId,\r\n      transactionAmount,\r\n      token,\r\n    }\r\n\r\n    const filteredSchedules = schedules.map((schedule) => {\r\n      return {\r\n        procedure: {\r\n          id: schedule.procedure.id,\r\n          name: schedule.procedure.name,\r\n          time: schedule.procedure.time,\r\n        },\r\n        professional: {\r\n          id: schedule.professional.id,\r\n          name: schedule.professional.name,\r\n          photo: schedule.professional.photo,\r\n          price: parseFloat(schedule.professional.price),\r\n        },\r\n        scheduleDate: schedule.selectedDate,\r\n        scheduleTime: schedule.selectedTime,\r\n      }\r\n    })\r\n\r\n    const res = await mpApi.payNow(paymentData)\r\n    if (res.data.hasOwnProperty(\"status\")) {\r\n      const status = res.data.status\r\n      if (status === \"approved\" || status === \"pending\" ) {\r\n        const { user } = userInfo\r\n        const response = await submitSchedule({\r\n          userId: user.uid,\r\n          userName: user.displayName,\r\n          userPhoto: user.photoURL,\r\n          userEmail: user.email,\r\n          schedules: filteredSchedules,\r\n          paymentInfo: res.data,\r\n        })\r\n        \r\n        console.log(\"SALVOU?\", response)\r\n      }\r\n    }\r\n\r\n    setPaymentStatusDetails(res.data)\r\n    // console.log(\"RESULT\", res.data)\r\n  }\r\n\r\n  function getCardToken(event) {\r\n    event.preventDefault()\r\n\r\n      let form = document.getElementById(\"paymentForm\")\r\n      window.Mercadopago.createToken(form, setCardTokenAndPay)\r\n      return false\r\n  }\r\n\r\n  function setCardTokenAndPay(status, response) {\r\n    if (status == 200 || status == 201) {\r\n      let card = document.getElementById(\"token\")\r\n      card.value = response.id\r\n      // let form = document.getElementById(\"paymentForm\")\r\n      // let card = document.createElement(\"input\")\r\n      // card.setAttribute(\"name\", \"token\")\r\n      // card.setAttribute(\"type\", \"hidden\")\r\n      // card.setAttribute(\"value\", response.id)\r\n      // form.appendChild(card)\r\n      // setDoSubmit(true)\r\n      // form.submit()\r\n      pay()\r\n    } else {\r\n      alert(\r\n        \"Verifique os dados inseridos!\\n\" + JSON.stringify(response, null, 4)\r\n      )\r\n      // alert(\"Verifique os dados inseridos!\\n\" + mpInsertionErros[response.cause[0].code])\r\n    }\r\n  }\r\n\r\n  /***\r\n   * UX functions\r\n   */\r\n\r\n  function cleanCardInfo() {\r\n    document.getElementById(\"cardNumber\").style.backgroundImage = \"\"\r\n    document.getElementById(\"issuerInput\").classList.add(\"hidden\")\r\n    document.getElementById(\"issuer\").options.length = 0\r\n    document.getElementById(\"installments\").options.length = 0\r\n  }\r\n  //Handle price update\r\n  function updatePrice() {}\r\n  // document.getElementById('quantity').addEventListener('change', updatePrice);\r\n  // updatePrice();\r\n\r\n  //Retrieve product description\r\n  // document.getElementById('description').value = document.getElementById('product-description').innerHTML;\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        <section class=\"payment-form dark\">\r\n          <div class=\"\">\r\n            <div class=\"block-heading\">\r\n              <h2>Pagamento no cartão</h2>\r\n            </div>\r\n            <div class=\"form-payment\">\r\n              <div class=\"products\">\r\n                <h2 class=\"title\">Itens</h2>\r\n                <div class=\"item\">\r\n                  <span class=\"price\" id=\"summary-price\"></span>\r\n\r\n                  <p class=\"item-name\">\r\n                    <em>{getDescription()}</em>{\" \"}\r\n                    <span id=\"summary-quantity\"></span>\r\n                  </p>\r\n                </div>\r\n                <div class=\"total\">\r\n                  Valor do pagamento\r\n                  <span class=\"price\" id=\"summary-total\">\r\n                    {price}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"payment-details\">\r\n                <form onSubmit={handleSubmit} id=\"paymentForm\">\r\n                  <h3 class=\"title\">Suas informações</h3>\r\n                  <div class=\"row\">\r\n                    <div class=\"form-group col\">\r\n                      <label for=\"email\">E-Mail</label>\r\n                      <TextField\r\n                        required\r\n                        defaultValue=\"seijiyokai@gmail.com\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"row\">\r\n                    <div class=\"form-group col-sm-5\">\r\n                      {/* <label for=\"docType\">Tipo de documento</label> */}\r\n                      <Select\r\n                        native\r\n                        hidden\r\n                        inputProps={{\r\n                          \"data-checkout\": \"docType\",\r\n                        }}\r\n                        id=\"docType\"\r\n                        name=\"docType\"\r\n                        type=\"text\"\r\n                        variant=\"outlined\"\r\n                        value=\"CPF\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group col-sm-7\">\r\n                      <label for=\"docNumber\">CPF</label>\r\n                      <TextField\r\n                        required\r\n                        defaultValue=\"76185675900\"\r\n                        id=\"docNumber\"\r\n                        name=\"docNumber\"\r\n                        inputProps={{\r\n                          \"data-checkout\": \"docNumber\",\r\n                        }}\r\n                        type=\"text\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <br />\r\n                  <h3 class=\"title\">Detalhes do cartão de crédito</h3>\r\n                  <div class=\"row\">\r\n                    <div class=\"form-group col-sm-8\">\r\n                      <label for=\"cardholderName\">\r\n                        Nome do proprietário do cartão\r\n                      </label>\r\n                      <TextField\r\n                        required\r\n                        defaultValue=\"Otimista\"\r\n                        id=\"cardholderName\"\r\n                        name=\"cardholderName\"\r\n                        inputProps={{\r\n                          \"data-checkout\": \"cardholderName\",\r\n                        }}\r\n                        type=\"text\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group col-sm-4\">\r\n                      <label for=\"\">Válido até</label>\r\n                      <div class=\"input-group expiration-date\">\r\n                        <TextField\r\n                          required\r\n                          defaultValue=\"12\"\r\n                          type=\"text\"\r\n                          placeholder=\"MM\"\r\n                          id=\"cardExpirationMonth\"\r\n                          name=\"cardExpirationMonth\"\r\n                          inputProps={{\r\n                            \"data-checkout\": \"cardExpirationMonth\",\r\n                          }}\r\n                          onselectStart={() => false}\r\n                          onPaste={() => false}\r\n                          onCopy={() => false}\r\n                          onCut={() => false}\r\n                          onDrag={() => false}\r\n                          onDrop={() => false}\r\n                          autoComplete=\"off\"\r\n                        />\r\n                        <span class=\"date-separator\">/</span>\r\n                        <TextField\r\n                          required\r\n                          defaultValue=\"22\"\r\n                          type=\"text\"\r\n                          placeholder=\"YY\"\r\n                          id=\"cardExpirationYear\"\r\n                          name=\"cardExpirationYear\"\r\n                          inputProps={{\r\n                            \"data-checkout\": \"cardExpirationYear\",\r\n                          }}\r\n                          onselectStart={() => false}\r\n                          onPaste={() => false}\r\n                          onCopy={() => false}\r\n                          onCut={() => false}\r\n                          onDrag={() => false}\r\n                          onDrop={() => false}\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"form-group col-sm-8\">\r\n                      <label for=\"cardNumber\">Numero do cartão</label>\r\n                      <TextField\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"cardNumber\"\r\n                        name=\"cardNumber\"\r\n                        onChange={handleChange}\r\n                        value={formData.cardNumber}\r\n                        inputProps={{\r\n                          \"data-checkout\": \"cardNumber\",\r\n                          class: \"input-background\",\r\n                        }}\r\n                        onselectStart={() => false}\r\n                        onCopy={() => false}\r\n                        onCut={() => false}\r\n                        onDrag={() => false}\r\n                        onDrop={() => false}\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group col-sm-4\">\r\n                      <label for=\"securityCode\">CVV</label>\r\n                      <TextField\r\n                        required\r\n                        defaultValue=\"123\"\r\n                        id=\"securityCode\"\r\n                        name=\"securityCode\"\r\n                        inputProps={{\r\n                          \"data-checkout\": \"securityCode\",\r\n                        }}\r\n                        type=\"text\"\r\n                        onselectStart={() => false}\r\n                        onPaste={() => false}\r\n                        onCopy={() => false}\r\n                        onCut={() => false}\r\n                        onDrag={() => false}\r\n                        onDrop={() => false}\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    </div>\r\n                    <div id=\"issuerInput\" class=\"form-group col-sm-12 hidden\">\r\n                      <label for=\"issuer\">Issuer</label>\r\n                      <Select\r\n                        native\r\n                        inputProps={{\r\n                          \"data-checkout\": \"issuer\",\r\n                        }}\r\n                        onChange={handleIssuerChange}\r\n                        id=\"issuer\"\r\n                        name=\"issuer\"\r\n                        class=\"form-control\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group col-sm-12\">\r\n                      <label for=\"installments\">Parcelas</label>\r\n                      <Select\r\n                        native\r\n                        type=\"text\"\r\n                        id=\"installments\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </div>\r\n                    <div class=\"form-group col-sm-12\">\r\n                      <input\r\n                        type=\"hidden\"\r\n                        name=\"transactionAmount\"\r\n                        id=\"amount\"\r\n                        value={price}\r\n                      />\r\n                      <input\r\n                        type=\"hidden\"\r\n                        name=\"paymentMethodId\"\r\n                        id=\"paymentMethodId\"\r\n                      />\r\n                      <input\r\n                        type=\"hidden\"\r\n                        name=\"description\"\r\n                        id=\"description\"\r\n                      />\r\n                      <input type=\"hidden\" name=\"token\" id=\"token\" />\r\n                      <br />\r\n                      <button type=\"submit\" class=\"btn btn-primary btn-block\">\r\n                        Pagar\r\n                      </button>\r\n                      <br />\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MercadoLivreCardForm\r\n","export default  {\r\n  approved: {\r\n    accredited: \"Pronto, seu pagamento foi aprovado! \"\r\n  },\r\n  in_process: {\r\n    pending_contingency: 'Não se preocupe, em menos de 2 dias úteis informaremos por e-mail se foi creditado.',\r\n    pending_review_manual: 'Não se preocupe, em menos de 2 dias úteis informaremos por e-mail se foi creditado.'\r\n  },\r\n  rejected: {\r\n    cc_rejected_bad_filled_card_number: 'Revise o número do cartão.',\r\n    cc_rejected_bad_filled_date: 'Revise a data de vencimento.',\r\n    cc_rejected_bad_filled_other: 'Revise os dados.',\r\n    cc_rejected_bad_filled_security_code: 'Revise o código de segurança do cartão.',\r\n    cc_rejected_blacklist: 'Não pudemos processar seu pagamento.',\r\n    cc_rejected_call_for_authorize: 'Você deve autorizar o pagamento do valor.',\r\n    cc_rejected_card_disabled: 'Ligue para a operadora do cartão para ativa-lo. O telefone está no verso do seu cartão.',\r\n    cc_rejected_card_error: 'Não conseguimos processar seu pagamento.',\r\n    cc_rejected_duplicated_payment: 'Você já efetuou um pagamento com esse valor. Caso precise pagar novamente, utilize outro cartão ou outra forma de pagamento.',\r\n    cc_rejected_high_risk: 'Seu pagamento foi recusado.',\r\n    cc_rejected_insufficient_amount: 'Saldo insuficiente.',\r\n    cc_rejected_invalid_installments: 'A operadora do seu cartão não processa pagamentos na quantidade de parcelas selecionada',\r\n    cc_rejected_max_attempts: 'Você atingiu o limite de tentativas permitido. Escolha outro cartão ou outra forma de pagamento.',\r\n    cc_rejected_other_reason: 'Não pudemos processar seu pagamento.'\r\n  },\r\n  4049: \"O valor da transação deve ser positivo!\"\r\n}","import {\r\n  Card as MaterialCard,\r\n  CardActions,\r\n  CardContent as MaterialCardContent,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  IconButton,\r\n  Radio,\r\n  RadioGroup,\r\n  Typography,\r\n} from \"@material-ui/core\"\r\nimport { DeleteSharp } from \"@material-ui/icons\"\r\nimport { useAuth, useShoppingCart } from \"hooks\"\r\nimport React, { useEffect } from \"react\"\r\nimport { SCHEDULE, RESERVATIONS } from \"routes\"\r\nimport styled from \"styled-components\"\r\nimport { Button, Content, Modal, Spacer } from \"ui\"\r\nimport { toMoney } from \"utils\"\r\nimport MercadoLivreCardForm from \"./mercado-livre-form\"\r\nimport mpResponseStrings from \"strings/mercadopago-response\"\r\nimport { Redirect } from \"react-router-dom\"\r\nfunction Checkout({ location, history }) {\r\n  const {\r\n    schedules,\r\n    removeScheduleFromShoppingCart,\r\n    resetShoppingCart,\r\n    paymentDetails,\r\n    setPaymentStatusDetails,\r\n  } = useShoppingCart()\r\n  const { userInfo } = useAuth()\r\n  const getPrice = () => {\r\n    let total = 0\r\n    let payment = 0\r\n    const percentage = 30\r\n    schedules.forEach((schedule) => {\r\n      let currentPrice = parseFloat(schedule.professional.price)\r\n      total += currentPrice\r\n      console.log(currentPrice)\r\n    })\r\n    payment = (percentage / 100) * total\r\n    payment = parseFloat(payment.toFixed(2))\r\n    return {\r\n      total,\r\n      payment,\r\n      percentage,\r\n    }\r\n  }\r\n  const price = getPrice()\r\n  useEffect(() => {\r\n    const pathname = location.pathname\r\n    document.title = pathname.substring(\r\n      pathname.lastIndexOf(\"/\") + 1,\r\n      pathname.length\r\n    )\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(\"CHECKOUT\", paymentDetails)\r\n    if (paymentDetails && paymentDetails.hasOwnProperty(\"status\")) {\r\n      resetShoppingCart()\r\n      alert(\r\n        mpResponseStrings[paymentDetails.status][paymentDetails.status_detail]\r\n      )\r\n      setPaymentStatusDetails({})\r\n        history.push(RESERVATIONS)\r\n    }\r\n\r\n    if (paymentDetails && paymentDetails.hasOwnProperty(\"cause\")) {\r\n      alert(mpResponseStrings[paymentDetails.cause[0].code])\r\n      setPaymentStatusDetails({})\r\n    }\r\n  }, [paymentDetails])\r\n\r\n  const removeSchedule = (schedule) => () => {\r\n    removeScheduleFromShoppingCart(schedule)\r\n  }\r\n\r\n  return (\r\n    <Content>\r\n      <Grid container justify=\"center\">\r\n        <Grid item sm={8} lg={6} md={6} xs={12}>\r\n          <Grid container>\r\n            {schedules.map((schedule, index) => (\r\n              <Card key={index}>\r\n                <CardContent className=\"first-card-content\">\r\n                  <CardText variant=\"subtitle1\">\r\n                    {new Date(schedule.selectedDate).toLocaleDateString(\r\n                      \"pt-BR\",\r\n                      { weekday: \"short\" }\r\n                    )}\r\n                  </CardText>\r\n                  <CardText noWrap variant=\"h5\">\r\n                    {new Date(schedule.selectedDate).getDate()}\r\n                    <CardText noWrap variant=\"caption\">\r\n                      {\" \"}\r\n                      de{\" \"}\r\n                      {new Date(\r\n                        schedule.selectedDate\r\n                      ).toLocaleDateString(\"pt-BR\", { month: \"short\" })}\r\n                    </CardText>\r\n                  </CardText>\r\n\r\n                  <CardText variant=\"subtitle1\">\r\n                    {schedule.selectedTime}\r\n                  </CardText>\r\n                </CardContent>\r\n                <CardContent className=\"card-info\">\r\n                  <CardText variant=\"h6\" noWrap>\r\n                    {schedule.procedure.name}\r\n                  </CardText>\r\n                  <CardText variant=\"subtitle1\" noWrap>\r\n                    {schedule.professional.name}\r\n                  </CardText>\r\n                  <CardText variant=\"subtitle1\">\r\n                    {toMoney(schedule.professional.price)}\r\n                  </CardText>\r\n                </CardContent>\r\n                <CardContent className=\"card-action\">\r\n                  <CardActions>\r\n                    <IconButton onClick={removeSchedule(schedule)}>\r\n                      <DeleteSharp />\r\n                    </IconButton>\r\n                  </CardActions>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </Grid>\r\n          <Spacer />\r\n          <Grid item xs={12}>\r\n            <Grid container justify=\"center\">\r\n              <Button to={SCHEDULE} variant=\"outlined\" color=\"primary\">\r\n                Adicionar outro serviço\r\n              </Button>\r\n            </Grid>\r\n            <Spacer />\r\n            <Grid item xs={12}>\r\n              <Grid container justify=\"center\">\r\n                <Grid item xs={6}>\r\n                  <Typography variant=\"body2\" noWrap>\r\n                    TOTAL\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Typography align=\"right\" variant=\"body2\" noWrap>\r\n                    {toMoney(price.total)}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Grid container justify=\"center\">\r\n                <Grid item xs={6}>\r\n                  <Typography variant=\"body1\" noWrap>\r\n                    Você pagará\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Typography align=\"right\" variant=\"body1\" noWrap>\r\n                    {toMoney(price.payment)}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Spacer />\r\n            <Typography variant=\"h5\" noWrap>\r\n              Pagamento\r\n            </Typography>\r\n            <Spacer />\r\n            <FormControl>\r\n              <RadioGroup>\r\n                <FormControlLabel\r\n                  value=\"card\"\r\n                  control={<Radio color=\"secondary\" />}\r\n                  label=\"Cartão de crédito\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"spot\"\r\n                  control={<Radio color=\"secondary\" />}\r\n                  label=\"Pagamento no local\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"bank-slip\"\r\n                  control={<Radio color=\"secondary\" />}\r\n                  label=\"Boleto\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n            <Spacer />\r\n            <Grid container justify=\"center\">\r\n              <Button to=\"/reservas\" variant=\"contained\" color=\"primary\">\r\n                Concluir agendamento\r\n              </Button>\r\n              <Modal>\r\n                <MercadoLivreCardForm\r\n                  schedules={schedules}\r\n                  price={price.payment}\r\n                  userInfo={userInfo}\r\n                />\r\n              </Modal>\r\n              <Spacer />\r\n              <Spacer />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Content>\r\n  )\r\n}\r\n\r\nconst Card = styled(MaterialCard)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-grow: 1;\r\n  border-left: 5px solid ${({ theme }) => theme.palette.primary.light};\r\n  margin-bottom: ${({ theme }) => theme.spacing(1)}px;\r\n`\r\nconst CardContent = styled(MaterialCardContent)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  margin-top: ${({ theme }) => theme.spacing(1)}px;\r\n  margin-bottom: ${({ theme }) => theme.spacing(1)}px;\r\n  padding-left: ${({ theme }) => theme.spacing(1)}px;\r\n  padding-right: ${({ theme }) => theme.spacing(2)}px;\r\n  padding-top: 0px;\r\n  padding-bottom: 0px;\r\n\r\n  &&.first-card-content {\r\n    border-right: 2px solid #111;\r\n  }\r\n\r\n  &&.card-info {\r\n    max-width: 58%;\r\n  }\r\n\r\n  &&.card-action {\r\n    flex-grow: 1;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n  }\r\n`\r\n\r\nconst CardText = styled(Typography)`\r\n  max-width: 100%;\r\n  width: 100%;\r\n`\r\n\r\nexport default Checkout\r\n"],"sourceRoot":""}