{"version":3,"sources":["utils/to-money.js","utils/percentage.js","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","pages/reservations/reservations.js"],"names":["toMoney","value","Intl","NumberFormat","style","currency","format","getPercentage","percentual","Card","React","props","ref","classes","className","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","name","CardContent","_props$component","component","Component","padding","paddingBottom","styled","MaterialCard","theme","spacing","MaterialCardContent","CardText","Typography","Reservations","useDatabase","userSchedules","fetchUserSchedules","userInfo","useAuth","useEffect","console","log","Grid","container","justify","item","sm","lg","md","xs","map","us","index","schedules","schedule","variant","Date","scheduleDate","seconds","toLocaleDateString","weekday","day","month","year","scheduleTime","procedure","noWrap","professional","price","paymentInfo","status"],"mappings":"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","file":"static/js/20.409968a7.chunk.js","sourcesContent":["function toMoney (value) {\r\n  return new Intl.NumberFormat('pt-BR', {\r\n    style: 'currency',\r\n    currency: 'BRL'\r\n  }).format(value)\r\n  // return Number(value).toLocaleString('pt-br', {\r\n  //   style: 'currency',\r\n  //   currency: 'BRL'\r\n  // })\r\n}\r\n\r\nexport default toMoney\r\n"," function getPercentage (value, percentual = 30){\r\n  return percentual / 100 * value\r\n}\r\n\r\nexport default getPercentage","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  Card as MaterialCard,\r\n  CardContent as MaterialCardContent,\r\n  CardActions,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\"\r\n\r\nimport { Content } from \"ui\"\r\nimport { useDatabase } from \"hooks\"\r\nimport { toMoney, getPercentage } from \"utils\"\r\nimport { useEffect } from \"react\"\r\nimport { useAuth } from \"hooks\"\r\n\r\nconst Reservations = () => {\r\n  const { userSchedules, fetchUserSchedules } = useDatabase()\r\n\r\n  const { userInfo } = useAuth()\r\n\r\n  useEffect(() => {\r\n    fetchUserSchedules(userInfo)\r\n    console.log(getPercentage(30, 100));\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n  }, [userSchedules])\r\n\r\n  return (\r\n    <Content>\r\n      <Grid container justify=\"center\">\r\n        <Grid item sm={10} lg={8} md={6} xs={12}>\r\n          <Grid container>\r\n            {userSchedules.map((us, index) => {\r\n            {return us.schedules.map(schedule => (\r\n              <Card key={schedule.scheduleDate.seconds * 1000}>\r\n                <CardContent className=\"card-info\">\r\n                  <CardText variant=\"inherit\">\r\n                    {new Date(schedule.scheduleDate.seconds * 1000).toLocaleDateString(\r\n                      \"pt-BR\",\r\n                      {\r\n                        weekday: \"long\",\r\n                        day: \"numeric\",\r\n                        month: \"long\",\r\n                        year: \"numeric\",\r\n                      }\r\n                    )}{\" \"}\r\n                    - {schedule.scheduleTime}\r\n                  </CardText>\r\n                  <CardText variant=\"subtitle1\">\r\n                    {schedule.procedure.name}\r\n                  </CardText>\r\n                  <CardText variant=\"subtitle1\" noWrap>\r\n                    {schedule.professional.name}\r\n                  </CardText>\r\n                  <CardText variant=\"subtitle1\">\r\n                    {toMoney(schedule.professional.price)}\r\n                  </CardText>\r\n                </CardContent>\r\n                <CardContent className=\"card-action\">\r\n                    <CardText variant=\"body1\" noWrap>\r\n                      {us.paymentInfo.status} \r\n                    </CardText>\r\n                    <CardText variant=\"body2\" noWrap>\r\n                      sinal {toMoney(getPercentage(schedule.professional.price))}\r\n                    </CardText>\r\n                    <CardText variant=\"body2\" noWrap>\r\n                      restante {toMoney(schedule.professional.price - getPercentage(schedule.professional.price))}\r\n                    </CardText>\r\n                </CardContent>\r\n              </Card>\r\n              ))}\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Content>\r\n  )\r\n}\r\nconst Card = styled(MaterialCard)`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-grow: 1;\r\n  border-left: 5px solid cyan;\r\n  margin-bottom: ${({ theme }) => theme.spacing(1)}px;\r\n`\r\nconst CardContent = styled(MaterialCardContent)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  margin-top: ${({ theme }) => theme.spacing(1)}px;\r\n  margin-bottom: ${({ theme }) => theme.spacing(1)}px;\r\n  padding-left: ${({ theme }) => theme.spacing(1)}px;\r\n  padding-right: ${({ theme }) => theme.spacing(2)}px;\r\n  padding-top: 0px;\r\n  padding-bottom: 0px;\r\n\r\n  &&.first-card-content {\r\n    border-right: 2px solid #111;\r\n  }\r\n\r\n  &&.card-info {\r\n    max-width: 58%;\r\n  }\r\n\r\n  &&.card-action {\r\n    flex-grow: 1;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n  }\r\n`\r\n\r\nconst CardText = styled(Typography)`\r\n  max-width: 100%;\r\n  width: 100%;\r\n`\r\n\r\nexport default Reservations\r\n"],"sourceRoot":""}