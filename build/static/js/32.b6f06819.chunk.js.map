{"version":3,"sources":["pages/admin/procedures/update/update-procedure.js"],"names":["UpdateProcedure","location","history","state","to","ADMIN_PROCEDURES","procedureToUpdate","procedure","updateProcedure","useDatabase","useState","name","time","setProcedure","price","professionalsPrices","setProfessionalsPrices","professionalsObject","professionals","fetchProfessionals","professionalsArray","setProfessionalsArray","selectedProfessional","setSelectedProfessional","inputPriceRef","useRef","useEffect","id","Object","keys","map","key","open","success","message","snackBar","setSnackbar","hasError","errors","length","handleProceduresChanges","e","target","value","console","log","handleUpdate","a","proc","res","setTimeout","goBack","Grid","container","spacing","item","xs","Alert","variant","severity","onChange","label","sm","Divider","justify","lg","md","List","professionalID","currentProfessional","ListItem","ListItemAvatar","Avatar","alt","toUpperCase","src","photo","ListItemText","primary","secondary","toMoney","ListItemSecondaryAction","IconButton","onClick","remainder","Delete","direction","alignItems","FormControl","style","width","Select","labelId","displayEmpty","fullWidth","MenuItem","disabled","professional","required","inputRef","inputProps","type","min","Button","preventDefault","inputValue","current","prices","color","Snackbar","onClose","autoHideDuration"],"mappings":"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","file":"static/js/32.b6f06819.chunk.js","sourcesContent":["import {\r\n  Avatar,\r\n  Button,\r\n  Divider,\r\n  FormControl,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  MenuItem,\r\n  Select,\r\n  Snackbar,\r\n} from \"@material-ui/core\"\r\nimport { Delete as DeleteIcon } from \"@material-ui/icons\"\r\nimport { Alert } from \"@material-ui/lab\"\r\nimport { useDatabase } from \"hooks\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { ADMIN_PROCEDURES } from \"routes\"\r\nimport { Content, H5, PaperContainer, Spacer, TextField } from \"ui\"\r\nimport { toMoney } from \"utils\"\r\n\r\nfunction UpdateProcedure({ location, history }) {\r\n  if (!location.state) {\r\n    return <Redirect to={ADMIN_PROCEDURES} />\r\n  }\r\n\r\n  const procedureToUpdate = location.state.procedure\r\n\r\n  const { updateProcedure } = useDatabase()\r\n\r\n  const [procedure, setProcedure] = useState(() => ({\r\n    name: \"\",\r\n    time: \"\",\r\n  }))\r\n  const [professionalsPrices, setProfessionalsPrices] = useState(\r\n    () => procedureToUpdate.price\r\n  )\r\n  const {\r\n    professionals: professionalsObject,\r\n    fetchProfessionals,\r\n  } = useDatabase()\r\n  const [professionalsArray, setProfessionalsArray] = useState(() => [])\r\n  const [selectedProfessional, setSelectedProfessional] = useState(() => \"\")\r\n  const inputPriceRef = useRef()\r\n\r\n  useEffect(() => {\r\n    fetchProfessionals()\r\n    setProcedure({\r\n      id: procedureToUpdate.id,\r\n      name: procedureToUpdate.name,\r\n      time: procedureToUpdate.time,\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setProfessionalsArray([\r\n      ...Object.keys(professionalsObject).map((key) => ({\r\n        id: key,\r\n        ...professionalsObject[key],\r\n      })),\r\n    ])\r\n  }, [professionalsObject, location])\r\n\r\n  const [snackBar, setSnackbar] = useState(() => ({\r\n    open: false,\r\n    success: false,\r\n    message: \"\",\r\n  }))\r\n\r\n  const hasError = () => {\r\n    let errors = 0\r\n    if (Object.keys(professionalsPrices).length < 1) {\r\n      errors++\r\n    }\r\n    if (procedure.name === \"\" || procedure.time === \"\") {\r\n      errors++\r\n    }\r\n\r\n    return errors > 0\r\n  }\r\n\r\n  const clearFields = () => {\r\n    setProcedure({\r\n      name: \"\",\r\n      time: \"\",\r\n    })\r\n    setProfessionalsPrices([])\r\n  }\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault()\r\n\r\n    const inputValue = inputPriceRef.current.value\r\n    if (selectedProfessional) {\r\n      setProfessionalsPrices((prices) => ({\r\n        ...prices,\r\n        [selectedProfessional]: inputValue,\r\n      }))\r\n      inputPriceRef.current.value = null\r\n    }\r\n  }\r\n\r\n  const handleDelete = (professionalID) => () => {\r\n    const { [professionalID]: removed, ...remainder } = professionalsPrices\r\n    setProfessionalsPrices(remainder)\r\n  }\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar({\r\n      open: false,\r\n      message: \"\",\r\n    })\r\n  }\r\n\r\n  const handleProfessionalChanges = (e) => {\r\n    setSelectedProfessional(e.target.value)\r\n  }\r\n\r\n  const handleProceduresChanges = (e) => {\r\n    const { name, value } = e.target\r\n    setProcedure((state) => ({\r\n      ...state,\r\n      [name]: value,\r\n    }))\r\n    console.log(procedure)\r\n  }\r\n\r\n  const handleUpdate = async () => {\r\n    console.log(\"erro? \", hasError())\r\n    if (!hasError()) {\r\n      const proc = {\r\n        ...procedure,\r\n        price: professionalsPrices,\r\n      }\r\n      const res = await updateProcedure(proc)\r\n      setSnackbar({\r\n        open: true,\r\n        success: res.success,\r\n        message: res.message,\r\n      })\r\n\r\n      setTimeout(() => {\r\n        history.goBack()\r\n      }, 1800)\r\n      clearFields()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Content>\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          <PaperContainer>\r\n            {hasError() && (\r\n              <Alert variant=\"filled\" severity=\"error\">\r\n                Preencha todos os campos e adicione valores\r\n              </Alert>\r\n            )}\r\n            <H5>Atualizar procedimento</H5>\r\n            <Grid container spacing={1}>\r\n              <TextField\r\n                value={procedure.name}\r\n                name=\"name\"\r\n                onChange={handleProceduresChanges}\r\n                variant=\"outlined\"\r\n                label=\"Procedimento\"\r\n                sm={9}\r\n                xs={12}\r\n              />\r\n              <TextField\r\n                value={procedure.time}\r\n                name=\"time\"\r\n                onChange={handleProceduresChanges}\r\n                variant=\"outlined\"\r\n                label=\"Tempo\"\r\n                sm={3}\r\n                xs={4}\r\n              />\r\n            </Grid>\r\n            <Spacer />\r\n            <H5>Valores</H5>\r\n            <Divider />\r\n            <Spacer />\r\n            <Grid item xs={12}>\r\n              <Grid container justify=\"center\">\r\n                <Grid item lg={4} md={4} sm={10} xs={12}>\r\n                  <List>\r\n                    {Object.keys(professionalsObject) != 0 &&\r\n                      Object.keys(professionalsPrices).map((key) => {\r\n                        const currentProfessional = professionalsObject[key]\r\n                        const price = professionalsPrices[key]\r\n                        return (\r\n                          <ListItem key={key}>\r\n                            <ListItemAvatar>\r\n                              <Avatar\r\n                                alt={currentProfessional.name.toUpperCase()}\r\n                                src={currentProfessional.photo}\r\n                              />\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                              primary={currentProfessional.name}\r\n                              secondary={toMoney(price)}\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                              <IconButton onClick={handleDelete(key)}>\r\n                                <DeleteIcon />\r\n                              </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                          </ListItem>\r\n                        )\r\n                      })}\r\n                  </List>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            {professionalsArray.length > 0 && (\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  spacing={2}\r\n                  direction=\"row\"\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item sm={4} xs={10}>\r\n                    <FormControl variant=\"outlined\" style={{ width: \"100%\" }}>\r\n                      <Select\r\n                        labelId=\"simple-select-label\"\r\n                        value={selectedProfessional}\r\n                        displayEmpty\r\n                        fullWidth\r\n                        onChange={handleProfessionalChanges}\r\n                      >\r\n                        <MenuItem value=\"\" disabled>\r\n                          <em>Selecione um profissional</em>\r\n                        </MenuItem>\r\n                        {professionalsArray.map((professional) => (\r\n                          <MenuItem\r\n                            key={professional.id}\r\n                            value={professional.id}\r\n                          >\r\n                            {professional.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item sm={3} xs={7}>\r\n                    <TextField\r\n                      required\r\n                      inputRef={inputPriceRef}\r\n                      inputProps={{ type: \"number\", min: 0 }}\r\n                      label=\"valor\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <Button\r\n                      onClick={handleClick}\r\n                      to=\"#\"\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                    >\r\n                      Definir\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n            <Spacer />\r\n            <Divider />\r\n            <Spacer />\r\n            <Grid container item justify=\"center\">\r\n              <Button\r\n                onClick={handleUpdate}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Atualizar\r\n              </Button>\r\n            </Grid>\r\n          </PaperContainer>\r\n          <Snackbar\r\n            open={snackBar.open}\r\n            onClose={handleCloseSnackbar}\r\n            autoHideDuration={3000}\r\n            key={snackBar.message}\r\n          >\r\n            <Alert\r\n              variant=\"filled\"\r\n              severity={snackBar.success ? \"success\" : \"error\"}\r\n            >\r\n              {snackBar.message}\r\n            </Alert>\r\n          </Snackbar>\r\n        </Grid>\r\n      </Grid>\r\n    </Content>\r\n  )\r\n}\r\n\r\nexport default UpdateProcedure\r\n"],"sourceRoot":""}